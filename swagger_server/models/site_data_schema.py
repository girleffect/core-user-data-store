# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class SiteDataSchema(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, site_id: int=None, schema: object=None, created_at: datetime=None, updated_at: datetime=None):
        """
        SiteDataSchema - a model defined in Swagger

        :param site_id: The site_id of this SiteDataSchema.
        :type site_id: int
        :param schema: The schema of this SiteDataSchema.
        :type schema: object
        :param created_at: The created_at of this SiteDataSchema.
        :type created_at: datetime
        :param updated_at: The updated_at of this SiteDataSchema.
        :type updated_at: datetime
        """
        self.swagger_types = {
            'site_id': int,
            'schema': object,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'site_id': 'site_id',
            'schema': 'schema',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._site_id = site_id
        self._schema = schema
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'SiteDataSchema':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The site_data_schema of this SiteDataSchema.
        :rtype: SiteDataSchema
        """
        return deserialize_model(dikt, cls)

    @property
    def site_id(self) -> int:
        """
        Gets the site_id of this SiteDataSchema.

        :return: The site_id of this SiteDataSchema.
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id: int):
        """
        Sets the site_id of this SiteDataSchema.

        :param site_id: The site_id of this SiteDataSchema.
        :type site_id: int
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")

        self._site_id = site_id

    @property
    def schema(self) -> object:
        """
        Gets the schema of this SiteDataSchema.

        :return: The schema of this SiteDataSchema.
        :rtype: object
        """
        return self._schema

    @schema.setter
    def schema(self, schema: object):
        """
        Sets the schema of this SiteDataSchema.

        :param schema: The schema of this SiteDataSchema.
        :type schema: object
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")

        self._schema = schema

    @property
    def created_at(self) -> datetime:
        """
        Gets the created_at of this SiteDataSchema.

        :return: The created_at of this SiteDataSchema.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """
        Sets the created_at of this SiteDataSchema.

        :param created_at: The created_at of this SiteDataSchema.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """
        Gets the updated_at of this SiteDataSchema.

        :return: The updated_at of this SiteDataSchema.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """
        Sets the updated_at of this SiteDataSchema.

        :param updated_at: The updated_at of this SiteDataSchema.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

