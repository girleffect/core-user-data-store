# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Country(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code: str=None, name: str=None, created_at: datetime=None, updated_at: datetime=None):
        """
        Country - a model defined in Swagger

        :param code: The code of this Country.
        :type code: str
        :param name: The name of this Country.
        :type name: str
        :param created_at: The created_at of this Country.
        :type created_at: datetime
        :param updated_at: The updated_at of this Country.
        :type updated_at: datetime
        """
        self.swagger_types = {
            'code': str,
            'name': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'code': 'code',
            'name': 'name',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._code = code
        self._name = name
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'Country':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The country of this Country.
        :rtype: Country
        """
        return deserialize_model(dikt, cls)

    @property
    def code(self) -> str:
        """
        Gets the code of this Country.

        :return: The code of this Country.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """
        Sets the code of this Country.

        :param code: The code of this Country.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) > 2:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `2`")
        if code is not None and len(code) < 2:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `2`")

        self._code = code

    @property
    def name(self) -> str:
        """
        Gets the name of this Country.

        :return: The name of this Country.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Country.

        :param name: The name of this Country.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name

    @property
    def created_at(self) -> datetime:
        """
        Gets the created_at of this Country.

        :return: The created_at of this Country.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """
        Sets the created_at of this Country.

        :param created_at: The created_at of this Country.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """
        Gets the updated_at of this Country.

        :return: The updated_at of this Country.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """
        Sets the updated_at of this Country.

        :param updated_at: The updated_at of this Country.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

