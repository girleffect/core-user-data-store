# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DeleteUserCreate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, username: str=None, email: str=None, msisdn: str=None, reason: str=None, deleter_id: str=None):  # noqa: E501
        """DeleteUserCreate - a model defined in Swagger

        :param id: The id of this DeleteUserCreate.  # noqa: E501
        :type id: str
        :param username: The username of this DeleteUserCreate.  # noqa: E501
        :type username: str
        :param email: The email of this DeleteUserCreate.  # noqa: E501
        :type email: str
        :param msisdn: The msisdn of this DeleteUserCreate.  # noqa: E501
        :type msisdn: str
        :param reason: The reason of this DeleteUserCreate.  # noqa: E501
        :type reason: str
        :param deleter_id: The deleter_id of this DeleteUserCreate.  # noqa: E501
        :type deleter_id: str
        """
        self.swagger_types = {
            'id': str,
            'username': str,
            'email': str,
            'msisdn': str,
            'reason': str,
            'deleter_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'email': 'email',
            'msisdn': 'msisdn',
            'reason': 'reason',
            'deleter_id': 'deleter_id'
        }

        self._id = id
        self._username = username
        self._email = email
        self._msisdn = msisdn
        self._reason = reason
        self._deleter_id = deleter_id

    @classmethod
    def from_dict(cls, dikt) -> 'DeleteUserCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The delete_user_create of this DeleteUserCreate.  # noqa: E501
        :rtype: DeleteUserCreate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DeleteUserCreate.


        :return: The id of this DeleteUserCreate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DeleteUserCreate.


        :param id: The id of this DeleteUserCreate.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this DeleteUserCreate.


        :return: The username of this DeleteUserCreate.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this DeleteUserCreate.


        :param username: The username of this DeleteUserCreate.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this DeleteUserCreate.


        :return: The email of this DeleteUserCreate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this DeleteUserCreate.


        :param email: The email of this DeleteUserCreate.
        :type email: str
        """

        self._email = email

    @property
    def msisdn(self) -> str:
        """Gets the msisdn of this DeleteUserCreate.


        :return: The msisdn of this DeleteUserCreate.
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn: str):
        """Sets the msisdn of this DeleteUserCreate.


        :param msisdn: The msisdn of this DeleteUserCreate.
        :type msisdn: str
        """

        self._msisdn = msisdn

    @property
    def reason(self) -> str:
        """Gets the reason of this DeleteUserCreate.


        :return: The reason of this DeleteUserCreate.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this DeleteUserCreate.


        :param reason: The reason of this DeleteUserCreate.
        :type reason: str
        """

        self._reason = reason

    @property
    def deleter_id(self) -> str:
        """Gets the deleter_id of this DeleteUserCreate.


        :return: The deleter_id of this DeleteUserCreate.
        :rtype: str
        """
        return self._deleter_id

    @deleter_id.setter
    def deleter_id(self, deleter_id: str):
        """Sets the deleter_id of this DeleteUserCreate.


        :param deleter_id: The deleter_id of this DeleteUserCreate.
        :type deleter_id: str
        """
        if deleter_id is None:
            raise ValueError("Invalid value for `deleter_id`, must not be `None`")  # noqa: E501

        self._deleter_id = deleter_id
