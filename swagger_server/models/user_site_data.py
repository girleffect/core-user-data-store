# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class UserSiteData(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, site_id: int=None, data_processing_consent_provided: bool=None, data: object=None, created_at: datetime=None, updated_at: datetime=None):
        """
        UserSiteData - a model defined in Swagger

        :param user_id: The user_id of this UserSiteData.
        :type user_id: str
        :param site_id: The site_id of this UserSiteData.
        :type site_id: int
        :param data_processing_consent_provided: The data_processing_consent_provided of this UserSiteData.
        :type data_processing_consent_provided: bool
        :param data: The data of this UserSiteData.
        :type data: object
        :param created_at: The created_at of this UserSiteData.
        :type created_at: datetime
        :param updated_at: The updated_at of this UserSiteData.
        :type updated_at: datetime
        """
        self.swagger_types = {
            'user_id': str,
            'site_id': int,
            'data_processing_consent_provided': bool,
            'data': object,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'site_id': 'site_id',
            'data_processing_consent_provided': 'data_processing_consent_provided',
            'data': 'data',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._user_id = user_id
        self._site_id = site_id
        self._data_processing_consent_provided = data_processing_consent_provided
        self._data = data
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'UserSiteData':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_site_data of this UserSiteData.
        :rtype: UserSiteData
        """
        return deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """
        Gets the user_id of this UserSiteData.

        :return: The user_id of this UserSiteData.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """
        Sets the user_id of this UserSiteData.

        :param user_id: The user_id of this UserSiteData.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def site_id(self) -> int:
        """
        Gets the site_id of this UserSiteData.

        :return: The site_id of this UserSiteData.
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id: int):
        """
        Sets the site_id of this UserSiteData.

        :param site_id: The site_id of this UserSiteData.
        :type site_id: int
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")

        self._site_id = site_id

    @property
    def data_processing_consent_provided(self) -> bool:
        """
        Gets the data_processing_consent_provided of this UserSiteData.

        :return: The data_processing_consent_provided of this UserSiteData.
        :rtype: bool
        """
        return self._data_processing_consent_provided

    @data_processing_consent_provided.setter
    def data_processing_consent_provided(self, data_processing_consent_provided: bool):
        """
        Sets the data_processing_consent_provided of this UserSiteData.

        :param data_processing_consent_provided: The data_processing_consent_provided of this UserSiteData.
        :type data_processing_consent_provided: bool
        """
        if data_processing_consent_provided is None:
            raise ValueError("Invalid value for `data_processing_consent_provided`, must not be `None`")

        self._data_processing_consent_provided = data_processing_consent_provided

    @property
    def data(self) -> object:
        """
        Gets the data of this UserSiteData.

        :return: The data of this UserSiteData.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data: object):
        """
        Sets the data of this UserSiteData.

        :param data: The data of this UserSiteData.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def created_at(self) -> datetime:
        """
        Gets the created_at of this UserSiteData.

        :return: The created_at of this UserSiteData.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """
        Sets the created_at of this UserSiteData.

        :param created_at: The created_at of this UserSiteData.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """
        Gets the updated_at of this UserSiteData.

        :return: The updated_at of this UserSiteData.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """
        Sets the updated_at of this UserSiteData.

        :param updated_at: The updated_at of this UserSiteData.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

