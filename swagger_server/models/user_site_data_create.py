# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserSiteDataCreate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_id: str=None, site_id: int=None, consented_at: date=None, blocked: bool=None, data: object=None):  # noqa: E501
        """UserSiteDataCreate - a model defined in Swagger

        :param user_id: The user_id of this UserSiteDataCreate.  # noqa: E501
        :type user_id: str
        :param site_id: The site_id of this UserSiteDataCreate.  # noqa: E501
        :type site_id: int
        :param consented_at: The consented_at of this UserSiteDataCreate.  # noqa: E501
        :type consented_at: date
        :param blocked: The blocked of this UserSiteDataCreate.  # noqa: E501
        :type blocked: bool
        :param data: The data of this UserSiteDataCreate.  # noqa: E501
        :type data: object
        """
        self.swagger_types = {
            'user_id': str,
            'site_id': int,
            'consented_at': date,
            'blocked': bool,
            'data': object
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'site_id': 'site_id',
            'consented_at': 'consented_at',
            'blocked': 'blocked',
            'data': 'data'
        }

        self._user_id = user_id
        self._site_id = site_id
        self._consented_at = consented_at
        self._blocked = blocked
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'UserSiteDataCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_site_data_create of this UserSiteDataCreate.  # noqa: E501
        :rtype: UserSiteDataCreate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this UserSiteDataCreate.


        :return: The user_id of this UserSiteDataCreate.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this UserSiteDataCreate.


        :param user_id: The user_id of this UserSiteDataCreate.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def site_id(self) -> int:
        """Gets the site_id of this UserSiteDataCreate.


        :return: The site_id of this UserSiteDataCreate.
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id: int):
        """Sets the site_id of this UserSiteDataCreate.


        :param site_id: The site_id of this UserSiteDataCreate.
        :type site_id: int
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def consented_at(self) -> date:
        """Gets the consented_at of this UserSiteDataCreate.


        :return: The consented_at of this UserSiteDataCreate.
        :rtype: date
        """
        return self._consented_at

    @consented_at.setter
    def consented_at(self, consented_at: date):
        """Sets the consented_at of this UserSiteDataCreate.


        :param consented_at: The consented_at of this UserSiteDataCreate.
        :type consented_at: date
        """

        self._consented_at = consented_at

    @property
    def blocked(self) -> bool:
        """Gets the blocked of this UserSiteDataCreate.


        :return: The blocked of this UserSiteDataCreate.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked: bool):
        """Sets the blocked of this UserSiteDataCreate.


        :param blocked: The blocked of this UserSiteDataCreate.
        :type blocked: bool
        """

        self._blocked = blocked

    @property
    def data(self) -> object:
        """Gets the data of this UserSiteDataCreate.


        :return: The data of this UserSiteDataCreate.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data: object):
        """Sets the data of this UserSiteDataCreate.


        :param data: The data of this UserSiteDataCreate.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data
